;; .stumpwmrc

;; TODO:
;; Use amixer?
;; Set prefix key to Alt-Shift or Super? Single key?

(in-package :stumpwm)

;; Load Swank so we can connect with SLIME
(pushnew "/home/redline/emacs/site-lisp/slime/"
         asdf:*central-registry* :test #'equal)
(asdf:oos 'asdf:load-op 'swank)
(swank-loader:init)
(defvar *swank-p* nil)

;; Define swank command to start swank server on port 4005
(defcommand swank () ()
  "Starts a swank server on port 4005 and notifies the user."
  ;(setf stumpwm:*top-level-error-action* :break)
  (if *swank-p*
      (message "Swank server already running.")
      (progn
        (swank:create-server :port 4005
                             :style swank:*communication-style*
                             :dont-close t)
        (setf *swank-p* t)
        (message "Starting swank on port 4005."))))

;; Set contribs directory and load a few
(set-contrib-dir "/usr/share/stumpwm/")
(mapcar #'load-module '("cpu" "mem" "net" "battery"
                        "notifications" "productivity"))

;; Define fix-layout command to resize everything when I dock and undock
(defcommand fix-layout () ()
  "Fix layout calls redisplay on all windows.
For use whenever I dock and undock switching screens."
  (let ((groups (screen-groups (current-screen)))
        (present-group (current-group))
        (present-window (window-number (current-window))))
    (loop for group in groups do
      (gselect group)
      (loop for window in (group-windows group) do
        (select-window-by-number (window-number window))
        (redisplay)))
    (gselect present-group)
    (select-window-by-number present-window)))

;;;; Some fairly invasive changes to the notifications contrib to get the behavior I want...
;;;; Namely, give me a list of who I've missed messages from and
;;;; define a command to show me the messages and clear them out.

;; We really want to use hash-tables for the grouping...
(defcommand notifications-reset ()
    ()
  "Clear all notifications."
  (setf notifications (make-hash-table :test #'equal)))
(notifications-reset) ; Go ahead and ensure notifications is a hash table.

;; Redefine notifications-add to group messages by sender.
(defcommand notifications-add (str)
    ((:rest "Notification: "))
  "Add a notification string. Since I use notifications exclusively for chat/IM,
group the messages by sender. Knowledge of the incoming notification format is assumed."
  ; TODO: what if the text contains ":"? use position+subseq instead?
  (let* ((split-msg (split-string str ":"))
         (sender (first split-msg))
         (text (second split-msg)))
    (push text (gethash sender notifications))))

;; Redefine notifications mode-line output to show people/friends missed, colorize it.
(defun notifications-as-string (&rest r)
  (declare (ignore r))
  (let ((missed-count (hash-table-count notifications))
        (senders (loop for k being the hash-keys in notifications collecting k)))
    (format nil "Messages: ~a[ ~{~a~^, ~} ]"
            (bar-zone-color (* 10 missed-count))
            senders)))

;; TODO: Define show-messages so I can quickly check what I'm missing on IRC/IM.
;; Bind it to C-i C-m in the func-bindings below...
;(defcommand show-messages () ()
;  "Display the senders and their messages, then clear the notifications table."
;  )

;;;; End notifications hacks

;; Who doesn't love lambda.dat?
(defcommand quotes-on-lisp-etc ()
  ()
  "Run fortune on a few files and display the results with message"
  (message-no-timeout
   (run-shell-command
    "fortune 50% lambda 20% linux 10% wisdom 10% work 10% education" t)))

;; Add status bar
(setf *mode-line-background-color* "Black"
      *mode-line-foreground-color* "white"
      *mode-line-border-color*     "red"
      *mode-line-timeout*          1
      *mode-line-screen-position*  :top)

(setf *screen-mode-line-format* '("%g | %c %M %l %b   %N"))

;; And turn it on
(when (not (head-mode-line (current-head)))
  (toggle-mode-line (current-screen) (current-head)))

;; Variables
(set-prefix-key (kbd "C-i"))
(setf *mouse-focus-policy* :click)
(setf *startup-message* "So high, so low, so many things to know.")

;; Set up "Virtual Desktops" mapped to Alt-1 through Alt-0
(setf *group-format* "%n")
(run-commands "gselect 1" "grename 1")
(loop for i from 1 to 9 do
  (unless (= i 1) ; Group 1 is the Default group and already created.
    (gnewbg (format nil "~d" i)))
     (define-key *top-map* (kbd (format nil "M-~a" i))
       (format nil "gselect ~a" i)))
(loop for (unshifted . shifted) in
     '((1 . "!") (2 . "@") (3 . "#") (4 . "$") (5 . "%")
       (6 . "^") (7 . "&") (8 . "*") (9 . "(")) do
     (define-key *top-map* (kbd (format nil "M-~a" shifted))
       (format nil "gmove ~a" unshifted)))

;; Global keybindings
(define-key *top-map* (kbd "M-TAB") "next")
(define-key *top-map* (kbd "M-RET") "eval")

;; Wipe *root-map* and add prefixed keybindings, mostly programs
(setf *root-map* (make-sparse-keymap))
(let ((exec-bindings
       '(("d" . "evince") ; document viewer
         ("w" . "conkeror") ; web browser
         ("m" . "smplayer") ; movie player
         ("r" . "gmrun") ; run
         ("e" . "emacsclient -c") ; editor
         ("l" . "factor-vm") ; factorlang
         ("t" . "urxvt") ; terminal
         ("a" . "urxvt -e rlwrap sbcl --eval \"(ql:quickload :shuffletron)\" --eval \"(shuffletron:run)\"") ; audio player
         ("s" . "scrot -d 5 '%Y-%m-%d.png' -e 'mv $f ~/images/screenshots/'") ; print screen
         ("b" . "~/builds/bin/randomfile -p ~/images/wallpapers") ; background setter
         ("f" . "thunar") ; file manager
         ("p" . "pidgin") ; Instant Messenger/IRC
         ("n" . "urxvt -e /usr/bin/wicd-curses") ; networking configuration
         ("v" . "VirtualBox") ; virtual machines
         ("c" . "chromium")))
      (func-bindings
       '(("C-n" . "notifications-reset")
         ("C-u" . "quotes-on-lisp-etc")
         ("C-s" . "swank")
         ("C-l" . "loadrc")
         ("C-w" . "delete")
         ("C-h" . "hsplit")
         ("C-v" . "vsplit")
         ("C-r" . "remove-split")
         ("C-d" . "echo-date")
         ("C-f" . "fix-layout")
         ("C-q" . "quit"))))
  (loop for (key . program) in exec-bindings do
    (define-key *root-map* (kbd key) (concatenate 'string "exec " program)))
  (loop for (key . function) in func-bindings do
    (define-key *root-map* (kbd key) function)))
