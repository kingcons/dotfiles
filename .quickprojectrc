(in-package :quickproject)

(defhook add-gitignore-hook
  (:docs "Add a .gitignore for emacs temp files and fasls.")
  (with-new-file (stream (relative ".gitignore"))
    (format stream "*~~~%*.fas~%*.fasl~%*.lx32fsl~%*.lx64fsl~%\\#*~%\\.#*~%")))

(defhook reorganize-source-hook
  (:docs "Move package file and application file to src/, add tests/ and docs/.")
  (ensure-directories-exist (relative "src/"))
  (let ((absolute-p (eql :absolute (first (pathname-directory pathname)))))
    (dolist (file (list "package.lisp" (concatenate 'string name ".lisp")))
      (rename-file (relative file)
                   (if absolute-p
                       (relative file (relative "src/"))
                       (relative file "src/"))))))

(defhook test-hook
  (:docs "Write a skeleton tests file using FiveAM.")
  (ensure-directories-exist (relative "tests/"))
  (with-new-file (stream (relative "tests.lisp" (relative "tests/")))
    (format stream "(defpackage :~A-tests~%" name)
    (format stream "  (:use #:cl ~S #:fiveam)~%" (uninterned-symbolize name))
    (format stream "  (:export #:run!))~%~%")
    (format stream "(in-package ~A-tests)~%~%" name)
    (format stream "(def-suite ~A)~%(in-suite ~A)~%~%" name name)))

;; TODO: Update package file with (:documentation "<a...>Homepage</a>")?
;; TODO: Investigate sb-texinfo and atdoc?
(defhook docs-hook
  (:docs "Write a docs generator script using CL-API.")
  (ensure-directories-exist (relative "docs/"))
  (with-new-file (stream (relative "gen-docs.sh"))
    (format stream "#!/bin/sh~%")
    (format stream "sbcl --eval \"(ql:quickload '(~A sb-introspect cl-api))\" \~%" name)
    (format stream "     --eval \"(cl-api:api-gen :~A \"docs/index.html\")\" \~%" name)
    (format stream "     --eval \"(progn (terpri) (sb-ext:quit))\"~%")))

(defhook update-asd-hook
  (:docs "Update the asd file as needed.")
  (let ((tests (concatenate 'string name "-tests"))
        (results (make-array 32 :adjustable t :fill-pointer 0)))
    (with-open-file (in (nametype "asd") :direction :input)
      (flet ((add-line (line)
               (vector-push-extend line results)))
        (loop for line = (read-line in nil) while line do
              (add-line line)
              (when (search ":serial t" line :test #'string=)
                (add-line "  :version \"0.1\"")
                (add-line "  :license \"BSD\"")
                (add-line "  :author \"Brit Butler <redline6561@gmail.com>\"")
                (add-line "  :pathname \"src/\"")
                (add-line (format nil "  :in-order-to ((test-op (load-op ~A)))" tests))
                (add-line "  :perform (test-op :after (op c)")
                (add-line (format nil "             (funcall (intern \"RUN!\" :~A)))" tests))))
        (add-line (format nil "(defsystem #:~A" tests))
        (add-line (format nil "  :depends-on (~A fiveam)" name))
        (add-line "  :pathname \"tests/\"")
        (add-line (format nil "  :components ((:file \"tests\")))~%"))
        (add-line "(defmethod operation-done-p ((op test-op)")
        (add-line (format nil "                             (c (eql (find-system :~A))))" name))
        (add-line "  (values nil))")))
    (with-open-file (out (nametype "asd") :direction :output :if-exists :supersede)
      (loop for line across results do (write-line line out)))))
